
# Trigger on all pushes to main
trigger: 
  - main

# Run on all PRs, by default this is the case
# pr:
#   branches:
#     include:
#       - '*'

# Run a nightly (PST), to create the alpha release
schedules:
  - cron: '0 8 * * *'
    displayName: Nightly Alpha Release Build
    always: false # this is the default; we want to schedule only if changes since last success
    branches:
      include:
      - main

parameters:
  - name: npmReleaseType          # The NPM release tag
    displayName: NPM Release Tag
    default: ' '
    type: string
    values:
    - ' '             # No release!
    - 'dev'           # Alpha release
    - 'next'          # Beta release
    #- 'latest'        # Stable, disabled for now; not released as stable

variables:
  - name: releaseType
    value: ${{ iif (eq(variables['Build.CronSchedule.DisplayName'], 'Nightly Alpha Release Build'), 'dev', parameters.npmReleaseType) }}

resources:
  repositories:
    - repository: 1ESPipelineTemplates
      type: git
      name: 1ESPipelineTemplates/1ESPipelineTemplates
      ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    serviceTreeId: e38fcba7-191b-47ad-bb71-aeff7c983e3f
    featureFlags:
      enableSRMonitoring: true
    # sdl:
    #   git:
    #     persistCredentials: true
    pool:
      name: ess-1eshp-windows-latest

    # Separate out the CI builds from releasing
    stages:
      - stage: buildStage
        displayName: Build
        jobs:
          - job: buildJob
            displayName: CI Build and Test
            steps:
              - task: Npm@1
                displayName: 'Set postinstall scripts to true'
                inputs:
                  command: 'custom'
                  customCommand: 'config set ignore-scripts false'
              - task: NodeTool@0
                displayName: 'Install Node LTS'
                inputs:
                  versionSpec: '22.x'
              - task: Npm@1
                displayName: "Install Dependencies"
                inputs:
                  command: "install"
              - task: Npm@1
                displayName: "Build App"
                inputs:
                  command: "custom"
                  customCommand: "run build"
              - task: Npm@1
                displayName: "Build App (ESM)"
                inputs:
                  command: "custom"
                  customCommand: "run build:es5"
              - task: Npm@1
                displayName: "Package for NPM"
                inputs:
                  command: "custom"
                  customCommand: "run build:package"
              - task: Npm@1
                displayName: "Build Debug"
                inputs:
                  command: "custom"
                  customCommand: "run build:debug"
              - task: Npm@1
                displayName: 'Run jest unit tests'
                inputs:
                  command: 'custom'
                  customCommand: 'run test:unit'
              - task: Npm@1
                enabled: true
                displayName: 'Run jest integration tests'
                env:
                  ResourceConnectionString: $(RESOURCECONNECTIONSTRING)
                inputs:
                  command: 'custom'
                  customCommand: 'run execute:integrationtest'

              - task: ManifestGeneratorTask@0
                displayName: 'Generation Task'
                inputs:
                    BuildDropPath: $(System.DefaultWorkingDirectory)

      - stage: releaseStage
        dependsOn: buildStage
        condition: and(succeeded(), in(variables.releaseType, 'dev', 'next', 'latest') )
        displayName: Release
        jobs:
          - job: releaseBuild
            displayName: Build For Release
            templateContext:
              outputs:
              - output: pipelineArtifact
                path: $(System.DefaultWorkingDirectory)/
              sdl:
                git:
                  persistCredentials: true
            steps:
              - task: Npm@1
                displayName: 'Set postinstall scripts to true'
                inputs:
                  command: 'custom'
                  customCommand: 'config set ignore-scripts false'
              - task: NodeTool@0
                displayName: 'Install Node LTS'
                inputs:
                  versionSpec: '22.x'

              - task: PowerShell@2
                displayName: Set alpha release tag and push to GitHub
                condition: eq(variables.releaseType, 'dev') # Only on alpha-tagged releases
                continueOnError: true
                inputs:
                  targetType: 'inline'
                  script: |
                    $DATE_STAMP=$(Get-Date -format yyyyMMdd)
                    $VersionString=$(npm version prerelease --git-tag-version false --preid alpha-$DATE_STAMP)
                    git tag $VersionString
                    git push origin tag $VersionString

              - task: Npm@1
                displayName: "Install Dependencies"
                inputs:
                  command: "ci"
              - task: Npm@1
                displayName: "Build App"
                inputs:
                  command: "custom"
                  customCommand: "run build"
              - task: Npm@1
                displayName: "Build App (ESM)"
                inputs:
                  command: "custom"
                  customCommand: "run build:es5"
              - task: Npm@1
                displayName: "Package for NPM"
                inputs:
                  command: "custom"
                  customCommand: "run build:package"
              - task: ManifestGeneratorTask@0
                displayName: 'Generation Task'
                inputs:
                    BuildDropPath: $(System.DefaultWorkingDirectory)

          - job: Release
            displayName: Publish to NPM (ESRP)
            dependsOn: releaseBuild
            # Run if for a beta release, or for alpha if there are changes - the cron schedule looks after the change checking
            condition: and(succeeded(), or(in(variables.releaseType, 'next', 'latest'), eq(variables.releaseType, 'dev')) )
            templateContext:
              sdl:
                codeSignValidation:
                  skipScanningJsInReleaseJob: true
              type: releaseJob
              isProduction: true
              inputs:
                - input: pipelineArtifact
                  artifactName: drop
                  targetPath: $(System.DefaultWorkingDirectory)/drop
            steps:
              - task: EsrpRelease@9
                displayName: ESRP NPM Deploy
                enabled: true
                timeoutInMinutes: 0
                inputs:
                  connectedservicename: ACS WebchatAdapter ESRP Release Connection
                  usemanagedidentity: true
                  keyvaultname: AcsWebChatAdapterRelease
                  signcertname: AcsWCA-ReleaseCert-9b8f
                  clientid: 9ed91db5-8ad8-419b-9b8f-00b5edaffd07
                  intent: PackageDistribution
                  contenttype: npm
                  contentsource: Folder
                  folderlocation: $(System.DefaultWorkingDirectory)/drop/package
                  waitforreleasecompletion: true
                  owners: wamo@microsoft.com
                  approvers: eboltonmaggs@microsoft.com
                  serviceendpointurl: https://api.esrp.microsoft.com
                  mainpublisher: ESRPRELPACMAN
                  downloadentity: DownloadCenter
                  domaintenantid: cdc5aeea-15c5-4db6-b079-fcadd2505dc2
                  contentorigin: azeus
                  productstate: $(releaseType)
                  audience: Workflow.A_S_AV_PackageManager
            